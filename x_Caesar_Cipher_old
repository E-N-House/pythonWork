alphabet = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
]

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))


#Create a function called 'encrypt' that takes the 'text' and 'shift' as inputs.
def encrypt(plain_text, shift_amount):
    encoded_phrase = ""
    shift_amount = shift_amount % len(alphabet)

    #Inside the 'encrypt' function, shift each letter of the 'text' forwards in the alphabet by the shift amount and print the encrypted text.
    for char in plain_text:
        try:
            original_location = alphabet.index(char)
            new_location = original_location + shift_amount
            # account for if num is more than index 25 which is last index number because of starting with 0
            if new_location > len(alphabet) - 1:
                new_location -= len(alphabet)
            encoded_phrase += alphabet[new_location]
        # error handeling to get around punctuation
        except ValueError:
            encoded_phrase += char
    print(f'The encoded text is {encoded_phrase}')


#Create a different function called 'decrypt' that takes the 'text' and 'shift' as inputs.
def decrypt(encoded_text, shift_amount):
    decoded_text = ""
    shift_amount = shift_amount % len(alphabet)
    for char in encoded_text:

        try:
            encoded_position = alphabet.index(char)
            decoded_position = encoded_position - shift_amount
            decoded_char = alphabet[decoded_position]
            decoded_text += decoded_char

        except ValueError:
            decoded_text += char
    print(f"The decoded text is {decoded_text}")


#Check if the user wanted to encrypt or decrypt the message by checking the 'direction' variable. Then call the correct function based on that 'drection' variable. You should be able to test the code to encrypt *AND* decrypt a message.
if direction == "encode":
    encrypt(plain_text=text, shift_amount=shift)
elif direction == "decode":
    decrypt(encoded_text=text, shift_amount=shift)
else:
    print("You must enter encode or decode")

#Using a duplicate alphabet and combining decrypt and encrypt in one function

alphabet_twice = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd',
    'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
    't', 'u', 'v', 'w', 'x', 'y', 'z'
]

def ceasar(method, input_text, shift_amount):
    new_text = ""
    shift_amount = shift_amount % len(alphabet)
    if method == "decode":
      shift_amount *= -1
    for char in input_text:
      position = alphabet_twice.index(char)
      new_position = position + shift_amount
      new_char = alphabet_twice[new_position]
      new_text += new_char
    print(f"The {method}d message is {new_text}")

ceasar(method=direction, input_text=text, shift_amount=shift)
